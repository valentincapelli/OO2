Ejercicio 1
1.1 Se podria mejorar asignandole a los metodos nomres mas descriptivos.
Ejemplo:
/** 
* Retorna el límite de crédito del cliente
*/
public double limiteDeCredito() {...
}
/** 
* Retorna el monto facturado al cliente desde la fecha f1 a la fecha f2
*/
protected double montoFacturadoAlClienteEntre(LocalDate f1, LocalDate f2) {...

/** 
* Retorna el monto cobrado al cliente desde la fecha f1 a la fecha f2
*/
private double montoCobradoAlClienteEntre(LocalDate f1, LocalDate f2) {...

1.2 Bad smell: feature envy (envidia de atributos).
Refactoring a aplicar: move method.
El cambio que se realizo fue un Move Method refactoring. Y esta bien
aplicado, ya que el metodo participaEnProyecto usa datos de la clase Proyecto
para ejecutarse, y este esta siendo invocado por la clase Persona, generando
envidia de atributos. Entonces, al mover el metodo a la clase Proyecto, el metodo
trabajo con los datos dentro de sus misma clase, y no habria mas envidad de
atributos.

1.3
Situacion 1:
Bad smell: long method.
Refactoring a aplicar: extract method y replace temp with query.

Situacion 2:
Bad smell: reinventa la rueda.
Refactoring a aplicar: replace loop with pipeline.

Consultar temporary field.

Ejercicio 2
2.1
Bad smell: duplicate code
Refactoring a aplicar: push up field y push up method.

public abstract class Empleado {
    public String nombre;
    public String apellido;
    public double sueldoBasico = 0;
    // ......
    
public abstract double sueldo();

}

public class EmpleadoTemporario {
    public double horasTrabajadas = 0;
    public int cantidadHijos = 0;
    // ......
    
    public double sueldo() {
        return this.sueldoBasico
            + (this.horasTrabajadas * 500) 
            + (this.cantidadHijos * 1000) 
            -(this.sueldoBasico * 0.13);
    }
}


public class EmpleadoPlanta {
    public int cantidadHijos = 0;
    // ......
    
    public double sueldo() {
        return this.sueldoBasico 
            + (this.cantidadHijos * 2000)
            - (this.sueldoBasico * 0.13);
    }
}

public class EmpleadoPasante {
    public String nombre;
    public String apellido;
    public double sueldoBasico = 0;
    // ......
    
    public double sueldo() {
        return this.sueldoBasico - (this.sueldoBasico * 0.13);
    }
}

2.2
Bad smell: feature envy.
Refactoring a aplicar: move method.

public class Juego {
    // ......
    public void incrementar(Jugador j) {
        j.incrementar();
    }
    public void decrementar(Jugador j) {
        j.decrementar();
    }
}

public class Jugador {
    public String nombre;
    public String apellido;
    public int puntuacion = 0;

    private void incrementar(){
        this.puntuacion = this.puntuacion + 100;
    }

    private void decrementar(){
        this.puntuacion = this.puntuacion - 50;
    }
}

2.3
Bad smells: long method y reinventa la rueda.
Refactoring a aplicar: extract method y replace loop with pipeline.

public List<Post> ultimosPosts(Usuario user, int cantidad) {
    return this.posts.stream()
            .filter(post -> !post.getUsuario().equals(user))
            .sorted((p1, p2) -> p1.getFecha().compareTo(p2.getFecha()))
            .limit(cantidad).collect(Collectors.toList());
}

2.4
Bad smells: envidia de atributos.
Refactoring a aplicar: move method.

public class Producto {
    private String nombre;
    private double precio;
    
    public double getPrecio() {
        return this.precio;
    }
}

public class ItemCarrito {
    private Producto producto;
    private int cantidad;
        
    public Producto getProducto() {
        return this.producto;
    }
    
    public int getCantidad() {
        return this.cantidad;
    }

    public double calcularMonto(){
        return this.producto.getPrecio() * this.cantidad;
    }

}

public class Carrito {
    private List<ItemCarrito> items;
    
    public double total() {
        return this.items.stream()
        .mapToDouble(item -> item.calcularMonto())
        .sum();
    }
}

2.5
Bad smells: envidia de atributos.
Refactoring a aplicar: move method.

public class Supermercado {
   public void notificarPedido(long nroPedido, Cliente cliente) {
     String notificacion = MessageFormat.format(“Estimado cliente, se le informa que hemos recibido su pedido con número {0}, el cual será enviado a la dirección {1}”, new Object[] { nroPedido, cliente.getDireccionFormateada() });

     // lo imprimimos en pantalla, podría ser un mail, SMS, etc..
    System.out.println(notificacion);
  }
}

public class Cliente {
   public String getDireccionFormateada() {
	return 
		this.direccion.getDireccionFormateada();
   }
}

public class Direccion {
    public String getDireccionFormateada(){
        return 
		this.localidad + “, ” +
		this.calle + “, ” +
		this.numero + “, ” +
		this.departamento
      ;
    }
}

2.6
Bad smell: switch statements.
Refactoring a aplicar: reemplazar condicional con polimorfismo.

public interface TipoSubscripcion {
    public double calcularCostoPelicula();
}

Public class subscripcionBasico implements TipoSubscripcion {
    public double calcularCostoPelicula(Pelicula pelicula) {
        return pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno();
    }
}

Public class subscripcionFamilia implements TipoSubscripcion {
    public double calcularCostoPelicula(Pelicula pelicula) {
        return (pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno()) * 0.90;
    }
}

Public class subscripcionPlus implements TipoSubscripcion {
    public double calcularCostoPelicula(Pelicula pelicula) {
        return pelicula.getCosto();    
    }
}

Public class subscripcionPremium implements TipoSubscripcion {
    public double calcularCostoPelicula(Pelicula pelicula) {
        return pelicula.getCosto() * 0.75;   
    }
}

public class Usuario {
    TipoSubscripcion tipoSubscripcion;
    // ...

    public void setTipoSubscripcion(TipoSubscripcion unTipo) {
   	    this.tipoSubscripcion = unTipo;
    }
    
    public double calcularCostoPelicula(Pelicula pelicula) {
   	    return tipoSubscripcion.calcularCostoPelicula(pelicula);
    }
}

public class Pelicula {
    LocalDate fechaEstreno;
    // ...

    public double getCosto() {
   	 return this.costo;
    }
    
    public double calcularCargoExtraPorEstreno(){
	    // Si la Película se estrenó 30 días antes de la fecha actual, retorna un cargo de 0$, caso contrario, retorna un cargo extra de 300$
   	    return (ChronoUnit.DAYS.between(this.fechaEstreno, LocalDate.now()) ) > 30 ? 0 : 300;
    }
}
